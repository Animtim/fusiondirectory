#!/usr/bin/perl

#
# schema2ldif: Tool for converting OpenLDAP-style schemas to the LDIF format
# -----------
# Usage
# -----
#
# schema2ldif foo.schema > foo.ldif
#
# Based on work of Radovan Semancik
# schema2ldif, Version 1.2, (c) 2005-2009 Radovan Semancik
# schema2ldif, Version 1.3, (c) 2011 Antoine Gallavardin
# schema2ldif, Version 1.4 & 1.5 (c) 2011-2013 FusionDirectory Project
# Changes:
#
# v1.0.1: Added X-ORIGIN injection
# v1.1: Added support for "modify" LDIF format (changetype: modify operation)
# v1.1.1: Fixed "last line" bug
# v1.2: Added support for objectIdentifier macro
# v1.3: Added 2 parameters (antoine Gallavardin)
#       -c : cn of schema
#       -b : branch where schema are stored !
# v1.4: - corrected attributes and classe name on output
#       - Removed -c option not nedeed anymore
#       - Added doc in pod format
# v1.5  - Corrected regex for name of schema on command line
#
use strict;
use warnings;

use 5.008;

my $mode = "static";
my $origin = 'user defined';
my $cn = "" ;
my $branch = "cn=schema,cn=config";

# Turns on debug mode (for development purposes only)
my $debug = 0;

# Process command-line

if(@ARGV<=0) {
  usage();
  exit(-1);
}

while ($ARGV[0] =~ /^-/) {
  my $arg = shift;
  if ($arg eq "-h") {
    usage();
    exit();
  } elsif ($arg eq "-m") {
    $mode = "modify";
  } elsif ($arg eq "-o") {
    $origin = shift;
  } elsif ($arg eq "-b") {
    $branch = shift;
    } else {
    print STDERR "Unknown option $arg\n";
    usage();
    exit(-1);
  }
}

$cn = $ARGV[0];
die "Error: $cn is not a file\n" unless -f $cn;

$cn =~ s/^\.?\/?([^\/]+\/)*([^\/]+)\.[^.]+$/$2/;

my %attrNameMap = (
  'attributetype' => 'olcAttributeTypes',
  'objectclass' => 'olcObjectClasses',
);

my @definitionOrder = qw(attributetype objectclass);

my %oidMapping = ();
my %definitions = ();

# Print proper LDIF header

if ($mode eq "static") {
  # Header for static schema
  # used to drop into a file that server picks up on start
  print "dn: cn=$cn,$branch\n";
  print "objectClass: olcSchemaConfig\n";
  print "cn: cn=$cn\n";

} elsif ($mode eq "modify") {
  # Header for schema that is being uploaded to running server
  print "dn: cn=$cn,$branch\n";
  print "changetype: modify\n";

} else {
  die ("Unknown mode $mode\n");
}

# Reading the input schema file in loop
# processing definitions
while (<>) {

  # Comments
  if (/^\s*#/) {
    # In static mode pass the comments to output file
    print if ($mode eq "static");
    # the comments are ignored in other modes as they make
    # problems when used with some LDAP clients
    next;
  }

  chomp;

  if ( /^\s*objectIdentifier\s+(\S+)\s+(\S+)\s*$/) {
    # We have got objectIdentifier macro here.
    # Parse it and process to the %oidMapping map

    my ($name,$oidExpression) = ($1,$2);
    print STDERR "[P] objectIdentifier: $name -> $oidExpression\n" if $debug;

    if (isOid($oidExpression)) {
      $oidMapping{$name} = $oidExpression;
      print STDERR "  adding mapping $name -> $oidExpression\n" if $debug;
    } else {
      my $oid = expandOidMacro($oidExpression);
      if (defined $oid) {
        $oidMapping{$name} = $oid;
        print STDERR "  adding mapping $name -> $oid\n" if $debug;
      } else {
        print STDERR "Error processing objectIdentifier macro: $_\n";
      }
    }
  }

  if ( /^\s*(attributetype)\s*\(/i ||
       /^\s*(objectclass)\s*\(/i ) {

        my $type = lc($1);
    my $ldifLine = $attrNameMap{$type}.": (";

    $_ = $';
    my $level = 1;
    my $foundOrigin = undef;
    my $oid = undef;

    while ($level) {

      # raise or lower parenthesis level as necessary

      while ( /\(/g ) { $level++ }
      while ( /\)/g ) { $level-- }


      # OID expression should be the very first token
      # therefore process if it was not processed yet

      if (! defined $oid && /^\s*(\S+)\s*/) {
        my $oidExpression = $1;

        if (isOid($oidExpression)) {
          # OID expression is OID, no transformation needed
          $oid = $oidExpression;

        } else {
          # Try if OID expression is macro
          $oid = expandOidMacro($oidExpression);

          if (! defined $oid) {
            # OID expression is not macro, copy it verbatim to output
            # This is used if symbolic names are used instead of OIDs
            $oid = $oidExpression;
          }
        }

        $ldifLine .= " $oid";
        $_ = $';
      }

      if ($origin ne 'user defined') {
        # find X-ORIGIN clause in the input

        if (/X\-ORIGIN\s+\'([^\'*])\'/) {
          $foundOrigin = $1;
        }

        # if we are at the end (level 0) and there was no
        # X-ORIGIN clause, insert the default one
        # just before the last parenthesis

        if ($level == 0 && !defined($foundOrigin)) {
        s/\)\s*$/ X-ORIGIN \'$origin\' \)/;
        }
      }

      $ldifLine .= $_;

      $_ = <>;
      last unless defined $_;

      chomp;
      s/^\s+/ /;
      s/\s+$//;

    }

    print STDERR "[P] $type: $oid\n" if $debug;


    if ($mode eq "static") {
      print $ldifLine . "\n";
    } else {
      if (!$definitions{$type}) {
        $definitions{$type} = [];
      }

      push @{$definitions{$type}},$ldifLine;
    }

    last unless defined $_;
  }
}

if ($mode eq "modify") {
  my $first = 1;
  foreach my $type (@definitionOrder) {
    next unless ($definitions{$type});
    if ($first) {
      $first = 0;
    } else {
      print "-\n";
    }
    print "add: ".$attrNameMap{$type}."\n";
    foreach my $line (@{$definitions{$type}}) {
      print $line."\n";
    }
  }
}

sub isOid {
  my ($s) = @_;

  return ($s =~ /^[\.\d]+$/);
}

sub expandOidMacro {
  my ($macro) = @_;

  if ($macro =~ /:/) {
    my $key = $`;
    my $suffix = $';
    if (exists $oidMapping{$key}) {
      return $oidMapping{$key}.".".$suffix;
    } else {
      return undef;
    }
  }
  return $oidMapping{$macro};
}

sub usage {
  print STDERR "Usage: $0 [-h ] [-m] [-o <origin> ] [ -b ] out.schema > out.ldif\n";
  print STDERR "\t-h\t\tThis help message.\n";
  print STDERR "\t-m\t\tGenerate \"modify\" LDIF instead of \"static\"\n";
  print STDERR "\t-o <origin>\tSpecify X-ORIGIN to inject (default: user defined)\n";
  print STDERR "\t-b branch\tSpecify branch where schema are to be added (default: cn=schema,cn=config)\n";
  print STDERR "(c) 2000-2005 Radovan Semancik (http://storm.alert.sk/)\n";
  print STDERR "(c) 2011 Antoine Gallavardin <antoine.gallavardin\@free.fr>\n";
  print STDERR "(c) 2011 FusionDirectory Project <contact\@fusiondirectory.org>\n";
}

=head1 NAME

schema2ldif - convert schema to ldif for inclusion in cn=config backend

=head1 SYNOPSIS

schema2ldif [-h ] [-m] [-o <origin> ] [ -b ] out.schema > out.ldif

=head1 DESCRIPTION

schema2ldif is a script to convert schema to ldif for inclusion in cn=config backend

=over 4

=item B<-h>        help

=item B<-m>        Generate modify LDIF to put in a running cn=config backend

=item B<-o>        Specify X-ORIGIN to inject (default: user defined)

=item B<-b>        Specify branch where schema are to be added (default: cn=schema,cn=config)

=back

=head1 EXAMPLE

 fusiondirectory-schema2ldif quota.schema > quota.ldif

=head1 BUGS

Please report any bugs, or post any suggestions, to the fusiondirectory mailing list fusiondirectory-users or to
<https://forge.fusiondirectory.org/projects/fdirectory/issues/new>

=head1 LICENCE AND COPYRIGHT

This code is part of FusionDirectory <http://www.fusiondirectory.org>

=over 3

=item Copyright (c) 2005-2009 Radovan Semancik

=item Copyright (c) 2011 Antoine Gallavardin

=item Copyright (C) 2011-2012 FusionDirectory Project

=back

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

=cut
