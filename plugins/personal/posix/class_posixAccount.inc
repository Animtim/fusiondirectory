<?php
/*
  This code is part of FusionDirectory (http://www.fusiondirectory.org/)
  Copyright (C) 2003  Cajus Pollmeier
  Copyright (C) 2011  FusionDirectory

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
*/

/*!
  \brief   posixAccount plugin
  \author  Cajus Pollmeier <pollmeier@gonicus.de>
  \version 2.00
  \date    24.07.2003

  This class provides the functionality to read and write all attributes
  relevant for posixAccounts and shadowAccounts from/to the LDAP. It
  does syntax checking and displays the formulars required.
 */

class PosixStatusAttribute extends Attribute
{
  function __construct ($label, $description, $ldapName, $required = FALSE, $defaultValue = "", $acl = "")
  {
    parent::__construct ($label, $description, $ldapName, $required, $defaultValue, $acl);
    $this->setInLdap(FALSE);
  }

  function renderFormInput ()
  {
    return $this->getValue();
  }
}

class posixAccount extends simplePlugin
{
  var $displayHeader = TRUE;
  var $objectclasses = array("posixAccount", "shadowAccount");

  // The main function : information about attributes
  static function getAttributesInfo ()
  {
    return array(
      'main' => array(
        'name'  => _("Generic"),
        'icon'  => 'images/rightarrow.png',
        'attrs' => array(
          new StringAttribute(
            _('Home directory'), _('The path to the home directory of this user'),
            'homeDirectory', TRUE
          ),
          new SelectAttribute(
            _('Shell'), _('Which shell should be used when this user log in'),
            'loginShell', TRUE
          ),
          new SelectAttribute(
            _('Primary group'), _('Primary group for this user'),
            'primaryGroup', FALSE
          ),
          new PosixStatusAttribute(
            _('Status'), _('Status of this user unix account'),
            'posixStatus', FALSE
          ),
          new BooleanAttribute(
            _('Force UID/GID'), _('Force UID and GID values for this user'),
            'force_ids', FALSE
          ),
          new IntAttribute(
            _('UID'), _('UID value for this user'),
            'uidNumber', FALSE,
            0, FALSE, ""
          ),
          new IntAttribute(
            _('GID'), _('GID value for this user'),
            'gidNumber', FALSE,
            0, FALSE, ""
          )
        )
      )
    );
  }

  static function plInfo()
  {
    return array(
      "plShortName"     => _("Unix"),
      "plDescription"   => _("Edit users POSIX settings"),
      "plSelfModify"    => TRUE,
      "plDepends"       => array("user"),
      "plPriority"      => 2,
      "plCategory"      => array("users"),
      "plObjectType"    => array("user"),

      "plProvidedAcls"  => parent::generatePlProvidedAcls(self::getAttributesInfo())
    );
  }

  function __construct (&$config, $dn = NULL, $object = NULL)
  {
    parent::__construct($config, $dn, $object);

    $this->attributesInfo['main']['attrs']['uidNumber']->setUnique(TRUE);
    $this->attributesInfo['main']['attrs']['force_ids']->setInLdap(FALSE);
    $this->attributesInfo['main']['attrs']['force_ids']->setManagedAttributes(
      array(
        'disable' => array (
          FALSE => array (
            'main' => array (
              'uidNumber',
              'gidNumber',
            )
          )
        )
      )
    );
    $this->attributesInfo['main']['attrs']['primaryGroup']->setInLdap(FALSE);

    /* Setting uid to default */
    if (isset($this->attrs['uid'][0])) {
      $this->uid = $this->attrs['uid'][0];
    }

    if ($dn !== NULL) {

      /* Correct is_account. shadowAccount is not required. */
      if (isset($this->attrs['objectClass']) &&
          in_array ('posixAccount', $this->attrs['objectClass'])) {
        $this->is_account = TRUE;
      }

      $this->initially_was_account = $this->is_account;

      // Templates do not have a gidNumber
      if ($this->attributesInfo['main']['attrs']['gidNumber']->getValue() == 2147483647) {
        $this->attributesInfo['main']['attrs']['gidNumber']->setValue("");
      }

      /* Fill group */
      $this->attributesInfo['main']['attrs']['primaryGroup']->setValue($this->attributesInfo['main']['attrs']['gidNumber']->getValue());
    }

    /* Generate shell list from SYSTEMS_DIR./shells */
    $loginShellList = array();
    if (file_exists(SYSTEMS_DIR.'/shells')) {
      $shells = file (SYSTEMS_DIR.'/shells');
      foreach ($shells as $line) {
        if (!preg_match ("/^#/", $line)) {
          $loginShellList[] = trim($line);
        }
      }
    } else {
      if ($this->loginShell == "") {
        $loginShellList[] = _("unconfigured");
      }
    }

    /* Insert possibly missing loginShell */
    $loginShell = $this->attributesInfo['main']['attrs']['loginShell']->getValue();
    echo "<h1>$loginShell</h1>\n";
    if ($loginShell != "" && !in_array($loginShell, $loginShellList)) {
      $loginShellList[]= $loginShell;
    }
    $this->attributesInfo['main']['attrs']['loginShell']->setChoices($loginShellList);

    $this->ui = get_userinfo();

    $secondaryGroups = array();
    $secondaryGroups[0] = "- "._("automatic")." -";
    $ldap = $this->config->get_ldap_link();
    $ldap->cd($this->config->current['BASE']);
    $ldap->search("(objectClass=posixGroup)", array("cn", "gidNumber"));
    while ($attrs = $ldap->fetch()) {
      $secondaryGroups[$attrs['gidNumber'][0]] = $attrs['cn'][0];
    }
    asort ($secondaryGroups);
    $this->attributesInfo['main']['attrs']['primaryGroup']->setChoices(array_keys($secondaryGroups), array_values($secondaryGroups));

    $current = date("U");
    $current = floor($current / 60 / 60 / 24);

    //~ $shadowExpire     = $this->attributesInfo['account']['attrs']['shadowExpire']->getValue();
    //~ $shadowInactive   = $this->attributesInfo['account']['attrs']['shadowInactive']->getValue();
    //~ $shadowMin        = $this->attributesInfo['account']['attrs']['shadowMin']->getValue();
    //~ $shadowMax        = $this->attributesInfo['account']['attrs']['shadowMax']->getValue();
    //~ $shadowLastChange = $this->attributesInfo['account']['attrs']['shadowLastChange']->getValue();
    //~ if (($current >= $shadowExpire) && ($shadowExpire > 0)) {
      //~ $status = _("expired");
      //~ if (($current - $shadowExpire) < $shadowInactive) {
        //~ $status .= ", "._("grace time active");
      //~ }
    //~ } elseif (($shadowLastChange + $shadowMin) >= $current) {
      //~ $status = _("active").", "._("password not changeable");
    //~ } elseif (($shadowLastChange + $shadowMax) >= $current) {
      //~ $status = _("active").", "._("password expired");
    //~ } else {
      $status = _("active");
    //~ }
    $this->attributesInfo['main']['attrs']['posixStatus']->setValue($status);
  }

  function resetCopyInfos()
  {
    parent::resetCopyInfos();

    $this->savedGroupMembership = array();
    $this->savedUidNumber       = "";
    $this->savedGidNumber       = "";

    $this->uidNumber       = "";
    $this->gidNumber       = "";
  }

  function save()
  {
    $force_ids = $this->attributesInfo['main']['attrs']['force_ids']->getValue();

    if (!$force_ids) {
      /* Handle uidNumber.
       * - use existing number if possible
       * - if not, try to create a new uniqe one.
       * */
      if ($this->attributesInfo['main']['attrs']['uidNumber']->getInitialValue() != "") {
        $this->attributesInfo['main']['attrs']['uidNumber']->setValue(
          $this->attributesInfo['main']['attrs']['uidNumber']->getInitialValue()
        );
      } else {
        /* Calculate new id's. We need to place a lock before calling get_next_id
           to get real unique values.
         */
        $wait = 10;
        while (get_lock("uidnumber") != "") {
          sleep (1);

          /* Oups - timed out */
          if ($wait-- == 0) {
            msg_dialog::display(_("Warning"), _("Timeout while waiting for lock. Ignoring lock!"), WARNING_DIALOG);
            break;
          }
        }
        add_lock ("uidnumber", "gosa");
        $this->attributesInfo['main']['attrs']['uidNumber']->setValue(
          get_next_id("uidNumber", $this->dn)
        );
      }
    }

    /* Handle gidNumber
     * - If we do not have a primary group selected (automatic), we will check if there
     *    is already a group  with the same name and use this as primary.
     * - .. if we couldn't find a group with the same name, we will create a new one,
     *    using the users uid as cn and a generated uniqe gidNumber.
     * */
    if ($this->is_template && ($this->attributesInfo['main']['attrs']['primaryGroup']->getValue() == 0)) {
      $this->attributesInfo['main']['attrs']['uidNumber']->setValue(2147483647);
    } elseif (($this->attributesInfo['main']['attrs']['primaryGroup']->getValue() == 0) || $force_ids) {

      /* Search for existing group */
      $ldap = $this->config->get_ldap_link();
      $ldap->cd($this->config->current['BASE']);

      /* Are we forced to use a special gidNumber? */
      if($force_ids) {
        $gidNumber = $this->attributesInfo['main']['attrs']['gidNumber']->getValue();
        $ldap->search("(&(objectClass=posixGroup)(gidNumber=$gidNumber))", array("cn","gidNumber"));
      } else {
        $ldap->search("(&(objectClass=posixGroup)(gidNumber=*)(cn=".$this->uid."))", array("cn","gidNumber"));
      }

      /* No primary group found, create a new one */
      if ($ldap->count() == 0) {
        $groupcn = $this->uid;
        $pri_attr = $this->config->get_cfg_value("accountPrimaryAttribute");
        $groupdn = preg_replace ('/^'.preg_quote($pri_attr,'/').'=[^,]+,'.preg_quote(get_people_ou(),'/').'/i',
            'cn='.$groupcn.','.get_groups_ou(), $this->dn);

        /* Request a new and uniqe gidNumber, if required */
        if (!$force_ids) {
          $this->attributesInfo['main']['attrs']['gidNumber']->setValue(
            get_next_id("gidNumber", $this->dn)
          );
        }

        /* If forced gidNumber could not be found, then check if the given group name already exists
           we do not want to modify the gidNumber of an existing group.
         */
        $cnt = 0;
        while ($ldap->dn_exists($groupdn) && ($cnt < 100)) {
          $cnt++;
          $groupcn = $this->uid."_".$cnt;
          $groupdn = preg_replace ('/^'.preg_quote($pri_attr, '/').'=[^,]+,'.preg_quote(get_people_ou(),'/').'/i',
              'cn='.$groupcn.','.get_groups_ou(), $this->dn);
        }

        /* Create new primary group and enforce the new gidNumber */
        $g = new group($this->config, $groupdn);
        $g->cn = $groupcn;
        $g->force_gid = 1;
        $g->gidNumber = $this->attributesInfo['main']['attrs']['gidNumber']->getValue();
        $g->description = _("Group of user")." ".$this->givenName;
        $g->save();

        @DEBUG (DEBUG_TRACE, __LINE__, __FUNCTION__, __FILE__,
          sprintf("Primary group '%s' created, using gidNumber '%s'.", $groupcn,
          $this->attributesInfo['main']['attrs']['gidNumber']->getValue()),"");
      } else {
        $attrs = $ldap->fetch();
        $this->attributesInfo['main']['attrs']['gidNumber']->setValue(
          $attrs['gidNumber'][0]
        );
        @DEBUG (DEBUG_TRACE, __LINE__, __FUNCTION__, __FILE__,
          "Found and used: <i>".$attrs['dn']."</i>",
          sprintf("Primary group '%s' exists, gidNumber is '%s'.", $this->uid,
          $this->attributesInfo['main']['attrs']['gidNumber']->getValue()));
      }
    } else {
      /* Primary group was selected by user */
      $this->attributesInfo['main']['attrs']['gidNumber']->setValue(
        $this->attributesInfo['main']['attrs']['primaryGroup']->getValue()
      );
      @DEBUG (DEBUG_TRACE, __LINE__, __FUNCTION__, __FILE__,
        sprintf("Primary group '%s' for user '%s' manually selected.",
        $this->attributesInfo['main']['attrs']['gidNumber']->getValue(), $this->uid), "");
    }
    parent::save();
  }
}

class old_posixAccount extends plugin
{
  /* Plugin specific values */
  var $homeDirectory      = "";
  var $loginShell         = "/bin/bash";
  var $uidNumber          = "";
  var $gidNumber          = "";
  var $gecos              = "";
  var $shadowMin          = "0";
  var $shadowMax          = "0";
  var $shadowWarning      = "0";
  var $shadowLastChange   = "0";
  var $shadowInactive     = "0";
  var $shadowExpire       = "";
  var $gosaDefaultPrinter = "";
  var $accessTo           = array();
  var $trustModel         = "";
  var $host               = array();

  var $glist                    = array();
  var $status                   = "";
  var $loginShellList           = array();
  var $groupMembership          = array();
  var $savedGroupMembership     = array();
  var $savedUidNumber           = "";
  var $savedGidNumber           = "";
  var $activate_shadowMin       = "0";
  var $activate_shadowMax       = "0";
  var $activate_shadowWarning   = "0";
  var $activate_shadowInactive  = "0";
  var $activate_shadowExpire    = "0";
  var $mustchangepassword       = "0";
  var $force_ids                = 0;
  var $gotoLastSystemLogin      = "";
  var $groupSelect              = FALSE;
  var $trustSelect              = FALSE;
  var $secondaryGroups          = array();
  var $primaryGroup             = 0;
  var $was_trust_account        = FALSE;
  var $memberGroup              = array();
  var $grouplist                = array();
  var $ui                       = array();
  var $ssh                      = null;
  var $sshAcl                   = "";

  var $GroupRegex               = "*";
  var $GroupUserRegex           = "*";
  var $SubSearch                = false;

  var $view_logged              = false;

  /* attribute list for save action */
  var $CopyPasteVars  =
      array("grouplist","groupMembership","activate_shadowMin",
      "activate_shadowMax","activate_shadowWarning","activate_shadowInactive","activate_shadowExpire",
      "must_change_password","printerList","grouplist","savedGidNumber","savedUidNumber");

  var $attributes     = array("homeDirectory", "loginShell", "uidNumber", "gidNumber", "gecos",
      "shadowMin", "shadowMax", "shadowWarning", "shadowInactive", "shadowLastChange",
      "shadowExpire", "gosaDefaultPrinter", "uid", "host", "gotoLastSystemLogin");

  var $objectclasses  = array("posixAccount", "shadowAccount");

  var $uid                  = "";
  var $multiple_support     = TRUE;
  var $groupMembership_some = array();

  /* constructor, if 'dn' is set, the node loads the given
     'dn' from LDAP */
  function __construct (&$config, $dn = NULL, $object = NULL)
  {
    global $class_mapping;

    /* Configuration is fine, allways */
    $this->config = $config;

    /* Load bases attributes */
    plugin::plugin($config, $dn, $object);

    /*  If gotoLastSystemLogin is available read it from ldap and create a readable
        date time string, fallback to sambaLogonTime if available.
     */
    if (isset($this->attrs['gotoLastSystemLogin'][0]) && preg_match("/^[0-9]*$/",$this->attrs['gotoLastSystemLogin'][0])) {
      $this->gotoLastSystemLogin = date("d.m.Y H:i:s", strtotime($this->attrs['gotoLastSystemLogin'][0]));
    } elseif(isset($this->attrs['sambaLogonTime'][0]) && preg_match("/^[0-9]*$/",$this->attrs['sambaLogonTime'][0])) {
      $this->gotoLastSystemLogin = date("d.m.Y H:i:s", $this->attrs['sambaLogonTime'][0]);
    }

    /* Setting uid to default */
    if (isset($this->attrs['uid'][0])) {
      $this->uid = $this->attrs['uid'][0];
    }

    $ldap = $this->config->get_ldap_link();

    if ($dn !== NULL) {

      /* Correct is_account. shadowAccount is not required. */
      if (isset($this->attrs['objectClass']) &&
          in_array ('posixAccount', $this->attrs['objectClass'])) {

        $this->is_account = TRUE;
      }

      /* Is this account a trustAccount? */
      if ($this->is_account && isset($this->attrs['host'])) {

        if ($this->attrs['host'][0] == "*") {
          $this->trustModel = "fullaccess";
        } else {
          $this->trustModel = "byhost";
          $this->accessTo = array();
            if ($this->is_account && isset($this->attrs['host'])) {
              for ($i = 0; $i < $this->attrs['host']['count']; $i++) {
                $tmp = $this->attrs['host'][$i];
                $this->accessTo[$tmp]= $tmp;
              }
            }
        }
        $this->was_trust_account = TRUE;
      } else {
        $this->was_trust_account = FALSE;
        $this->trustModel= "";
      }

/*      $this->accessTo = array();
      if ($this->is_account && isset($this->attrs['host'])){
        for ($i= 0; $i<$this->attrs['host']['count']; $i++){
          $tmp= $this->attrs['host'][$i];
          $this->accessTo[$tmp]= $tmp;
        }
      }*/
      $this->initially_was_account = $this->is_account;

      // Templates do not have a gidNumber
      if ($this->gidNumber == 2147483647) {
        $this->gidNumber    = "";
        $this->primaryGroup = 0;
      }

      /* Fill group */
      $this->primaryGroup = $this->gidNumber;

      /* Generate status text */
      $current = date("U");

      $current = floor($current / 60 /60 / 24);

      if (($current >= $this->shadowExpire) && $this->shadowExpire) {
        $this->status = _("expired");
        if (($current - $this->shadowExpire) < $this->shadowInactive) {
          $this->status .= ", "._("grace time active");
        }
      } elseif (($this->shadowLastChange + $this->shadowMin) >= $current) {
        $this->status = _("active").", "._("password not changeable");
      } elseif (($this->shadowLastChange + $this->shadowMax) >= $current) {
        $this->status = _("active").", "._("password expired");
      } else {
        $this->status = _("active");
      }

      /* Get group membership */
      $ldap->cd($this->config->current['BASE']);
      $ldap->search("(&(objectClass=posixGroup)(memberUid=".$this->uid."))", array("cn", "description"));

      while ($attrs= $ldap->fetch()) {
        if (!isset($attrs["description"][0])) {
          $entry = $attrs["cn"][0];
        } else {
          $entry = $attrs["cn"][0]." [".$attrs["description"][0]."]";
        }
        $this->groupMembership[$ldap->getDN()]= $entry;
      }
      asort($this->groupMembership);
      reset($this->groupMembership);
      $this->savedGroupMembership= $this->groupMembership;
      $this->savedUidNumber= $this->uidNumber;
      $this->savedGidNumber= $this->gidNumber;

      // Instanciate SSH object if available
      if (isset($class_mapping["sshPublicKey"])){
        if (empty($this->acl_base)){
          $this->acl_base= $config->current['BASE'];
        }

        $this->sshAcl= $this->getacl("sshPublicKey");
        $this->ssh= new sshPublicKey($this->config, $this->dn, $this->sshAcl);
      }
    }

    /* Adjust shadow checkboxes */
    foreach (array("shadowMin", "shadowMax", "shadowWarning", "shadowInactive",
          "shadowExpire") as $val){

      if ($this->$val != 0){
        $oval= "activate_".$val;
        $this->$oval= "1";
      }
    }

    /* Convert shadowExpire for usage */
    if ($this->shadowExpire == 0){
      $this->shadowExpire= "";
    } else {
      $this->shadowExpire= date('d.m.Y', $this->shadowExpire * 60 * 60 * 24);
    }


    /* Generate shell list from SYSTEMS_DIR./shells */
    if (file_exists(SYSTEMS_DIR.'/shells')) {
      $shells = file (SYSTEMS_DIR.'/shells');
      foreach ($shells as $line) {
        if (!preg_match ("/^#/", $line)) {
          $this->loginShellList[] = trim($line);
        }
      }
    } else {
      if ($this->loginShell == "") {
        $this->loginShellList[] = _("unconfigured");
      }
    }

    /* Insert possibly missing loginShell */
    if ($this->loginShell != "" && !in_array($this->loginShell, $this->loginShellList)){
      $this->loginShellList[]= $this->loginShell;
    }

    /* Generate group list */
    $this->ui = get_userinfo();
    $this->secondaryGroups[0]= "- "._("automatic")." -";
    $ldap->cd($this->config->current['BASE']);
    $ldap->search("(objectClass=posixGroup)", array("cn", "gidNumber"));
    while($attrs = $ldap->fetch()){
      $this->secondaryGroups[$attrs['gidNumber'][0]]= $attrs['cn'][0];
    }
    asort ($this->secondaryGroups);

    /* Get global filter config */
    if (!session::is_set("sysfilter")){
      $ui= get_userinfo();
      $base= get_base_from_people($ui->dn);
      $sysfilter= array( "depselect"       => $base,
          "regex"           => "*");
      session::set("sysfilter", $sysfilter);
    }
    $this->ui = get_userinfo();
  }

  function resetCopyInfos()
  {
    parent::resetCopyInfos();
    $this->savedGroupMembership = array();
    $this->savedUidNumber       = "";
    $this->savedGidNumber       = "";
    $this->uidNumber       = "";
    $this->gidNumber       = "";
  }


  /* execute generates the html output for this node */
  function execute($isCopyPaste = false)
  {
    /* Call parent execute */
    plugin::execute();
    $display= "";

    /* Log view */
    if($this->is_account && !$this->view_logged){
      $this->view_logged = TRUE;
      new log("view","users/".get_class($this),$this->dn);
    }

    /* Department has changed? */
    if(isset($_POST['depselect'])){
      session::set('CurrentMainBase',validate($_POST['depselect']));
    }

    if (!$isCopyPaste) {

      /* Do we need to flip is_account state? */
      if(isset($_POST['modify_state'])){
        if($this->is_account && $this->acl_is_removeable()){
          $this->is_account= FALSE;
        }elseif(!$this->is_account && $this->acl_is_createable()){
          $this->is_account= TRUE;
        }
      }

      /* Do we represent a valid posixAccount? */
      if (!$this->is_account && $this->parent === NULL ){
        $display= "<img alt=\"\" src=\"images/small-error.png\" align=\"middle\">&nbsp;<b>".
          msgPool::noValidExtension(_("POSIX"))."</b>";
        $display.= back_to_main();
        return ($display);
      }


      /* Show tab dialog headers */
      if ($this->parent !== NULL){
        if ($this->is_account){
          if (isset($this->parent->by_object['sambaAccount'])){
            $obj= $this->parent->by_object['sambaAccount'];
          }
          if (isset($obj) && $obj->is_account == TRUE &&
              ((isset($this->parent->by_object['sambaAccount']))&&($this->parent->by_object['sambaAccount']->is_account))
              ||(isset($this->parent->by_object['environment'] ))&&($this->parent->by_object['environment'] ->is_account)){

            /* Samba3 dependency on posix accounts are enabled
               in the moment, because I need to rely on unique
               uidNumbers. There'll be a better solution later
               on. */
            $display= $this->show_disable_header(msgPool::removeFeaturesButton(_("POSIX")), msgPool::featuresEnabled(_("POSIX"), array(_("Samba"), _("Environment"))), TRUE);
          } else {
            $display= $this->show_disable_header(msgPool::removeFeaturesButton(_("POSIX")), msgPool::featuresEnabled(_("POSIX")));
          }
        } else {
          $display= $this->show_enable_header(msgPool::addFeaturesButton(_("POSIX")), msgPool::featuresDisabled(_("POSIX")));
          return($display);
        }
      }
    }

    // Display dialog to allow selection of groups
    if (isset($_POST['edit_groupmembership'])){
      $this->groupSelect = new groupSelect($this->config,get_userinfo());
      $this->dialog= TRUE;
    }

    // Allow to select trusted machines from a list
    if (isset($_POST["add_ws"])){
      $this->trustSelect= new trustSelect($this->config,get_userinfo());
      $this->dialog= TRUE;
    }

    // Cancel trust and group dialog
    if (isset($_POST['add_groups_cancel']) || isset($_POST['add_ws_cancel'])){
      $this->groupSelect= NULL;
      $this->trustSelect= NULL;
      $this->dialog= FALSE;
    }

    // Add groups selected in groupSelect dialog to ours.
    if (isset($_POST['add_groups_finish']) && $this->groupSelect){
      $groups = $this->groupSelect->detectPostActions();
      if(isset($groups['targets'])){
        $this->addGroup ($groups['targets']);
        $this->is_modified= TRUE;
      }
      $this->groupSelect= NULL;
      $this->dialog= FALSE;
    }

    // Remove groups from currently selected groups.
    if (isset($_POST['delete_groupmembership']) &&
        isset($_POST['group_list']) && count($_POST['group_list'])){

      $this->delGroup ($_POST['group_list']);
    }

    // Add selected machines to trusted ones.
    if (isset($_POST["add_ws_finish"]) &&  $this->trustSelect){
      $trusts = $this->trustSelect->detectPostActions();
      if(isset($trusts['targets'])){

        $headpage = $this->trustSelect->getHeadpage();
        foreach($trusts['targets'] as $id){
          $attrs = $headpage->getEntry($id);
          $this->accessTo[$attrs['cn'][0]]= $attrs['cn'][0];
        }
        ksort($this->accessTo);
        $this->is_modified= TRUE;
      }
      $this->trustSelect= NULL;
      $this->dialog= FALSE;
    }

    // Remove machine from trusted ones.
    if (isset($_POST["delete_ws"]) && isset($_POST['workstation_list'])){
      foreach($_POST['workstation_list'] as $name){
        unset ($this->accessTo[$name]);
      }
      $this->is_modified= TRUE;
    }



    /* Templates now! */
    $smarty= get_smarty();
    $smarty->assign("usePrototype", "true");

    /* Show ws dialog */
    if ($this->trustSelect){

      // Build up blocklist
      session::set('filterBlacklist', array('cn' => array_values($this->accessTo)));
      return($this->trustSelect->execute());
    }

    /* Manage group add dialog */
    if ($this->groupSelect){

      // Build up blocklist
      session::set('filterBlacklist', array('dn' => array_keys($this->groupMembership)));
      return($this->groupSelect->execute());
    }

    // Handle ssh dialog?
    if ($this->ssh instanceOf sshPublicKey && preg_match('/[rw]/', $this->getacl("sshPublicKey"))) {
        $smarty->assign("usePrototype", "false");
       if ($result= $this->ssh->execute()) {
         $this->dialog= true;
         return $result;
       }
       $this->dialog= false;
    }


    /* Show main page */
    $smarty= get_smarty();
    $smarty->assign("usePrototype", "true");

    /* In 'MyAccount' mode, we must remove write acls if we are not in editing mode. */
    $SkipWrite = (!isset($this->parent) || !$this->parent) && !session::is_set('edit');

    $smarty->assign("sshPublicKeyACL", $this->getacl("sshPublicKey", $SkipWrite));

    /* Depending on pwmode, currently hardcoded because there are no other methods */
    if ( 1 == 1 ){
      $smarty->assign("pwmode", dirname(__FILE__)."/posix_shadow");

      $shadowMinACL     =  $this->getacl("shadowMin",$SkipWrite);
      $smarty->assign("shadowmins", sprintf(_("Password can't be changed up to %s days after last change"),
                                              "<input name=\"shadowMin\" size=3 maxlength=4 value=\"".$this->shadowMin."\">"));

      $shadowMaxACL     =  $this->getacl("shadowMax",$SkipWrite);
      $smarty->assign("shadowmaxs", sprintf(_("Password must be changed after %s days"),
                                              "<input name=\"shadowMax\" size=3 maxlength=4 value=\"".$this->shadowMax."\">"));

      $shadowInactiveACL=  $this->getacl("shadowInactive",$SkipWrite);
      $smarty->assign("shadowinactives", sprintf(_("Disable account after %s days of inactivity after password expiry"),
                                              "<input name=\"shadowInactive\" size=3 maxlength=4 value=\"".$this->shadowInactive."\">"));

      $shadowWarningACL =  $this->getacl("shadowWarning",$SkipWrite);
      $smarty->assign("shadowwarnings", sprintf(_("Warn user %s days before password expiry"),
                                              "<input name=\"shadowWarning\" size=3 maxlength=4 value=\"".$this->shadowWarning."\">"));

      foreach( array("activate_shadowMin", "activate_shadowMax",
                     "activate_shadowExpire", "activate_shadowInactive","activate_shadowWarning") as $val){
        if ($this->$val == 1){
          $smarty->assign("$val", "checked");
        } else {
          $smarty->assign("$val", "");
        }
        $smarty->assign("$val"."ACL", $this->getacl($val,$SkipWrite));
      }

      $smarty->assign("mustchangepasswordACL", $this->getacl("mustchangepassword",$SkipWrite));
    }

    // Set last system login
    $smarty->assign("gotoLastSystemLogin",$this->gotoLastSystemLogin);

    /* Fill arrays */
    $smarty->assign("shells", $this->loginShellList);
    $smarty->assign("secondaryGroups", $this->secondaryGroups);
    $smarty->assign("primaryGroup", $this->primaryGroup);
    if (!count($this->groupMembership)){
      $smarty->assign("groupMembership", array("&nbsp;"));
    } else {
      $smarty->assign("groupMembership", $this->groupMembership);
    }
    if (count($this->groupMembership) > 16){
      $smarty->assign("groups", "too_many_for_nfs");
    } else {
      $smarty->assign("groups", "");
    }

    /* Avoid "Undefined index: forceMode" */
    $smarty->assign("forceMode", "");

    /* Create onClick="" action string for the "Force UID/GID" option
     */
    $onClickIDS ="";
    if(preg_match("/w/",$this->getacl("uidNumber",$SkipWrite))){
      $onClickIDS .= "changeState('uidNumber');";
    }
    if(preg_match("/w/",$this->getacl("gidNumber",$SkipWrite))){
      $onClickIDS .= "changeState('gidNumber');";
    }
    $smarty->assign("onClickIDS", $onClickIDS);
    $smarty->assign("force_idsACL", $this->getacl("uidNumber",$SkipWrite).$this->getacl("gidNumber",$SkipWrite));

    /* Load attributes and acl's */
    foreach($this->attributes as $val){
      if((session::get("js"))&&(($val=="uidNumber")||($val=="gidNumber")))
      {
        $smarty->assign("$val"."ACL",$this->getacl($val,$SkipWrite));
        $smarty->assign("$val", $this->$val);
        continue;
      }
      $smarty->assign("$val", $this->$val);
      $smarty->assign("$val"."ACL", $this->getacl($val,$SkipWrite));
    }
    if($SkipWrite){
      $smarty->assign("groupMembershipACL","r");
    }else{
      $smarty->assign("groupMembershipACL","rw");
    }
    $smarty->assign("status", $this->status);

    /* Work on trust modes */
    $smarty->assign("trusthide", " disabled ");
    $smarty->assign("trustmodeACL",  $this->getacl("trustModel",$SkipWrite));
    if ($this->trustModel == "fullaccess"){
      $trustmode= 1;
      // pervent double disable tag in html code, this will disturb our clean w3c html
      $smarty->assign("trustmode",  $this->getacl("trustModel",$SkipWrite));

    } elseif ($this->trustModel == "byhost"){
      $trustmode= 2;
      $smarty->assign("trusthide", "");
    } else {
      // pervent double disable tag in html code, this will disturb our clean w3c html
      $smarty->assign("trustmode",  $this->getacl("trustModel",$SkipWrite));
      $trustmode= 0;
    }
    $smarty->assign("trustmode", $trustmode);
    $smarty->assign("trustmodes", array( 0 => _("disabled"), 1 => _("full access"),
          2 => _("allow access to these hosts")));



    if((count($this->accessTo))==0)
      $smarty->assign("emptyArrAccess",true);
    else
      $smarty->assign("emptyArrAccess",false);

      if($this->mustchangepassword){
        $smarty->assign("mustchangepassword", " checked ");
      } else {
        $smarty->assign("mustchangepassword", "");
      }

    $smarty->assign("workstations", $this->accessTo);

    // Add SSH button if available
    $smarty->assign("sshPublicKey", $this->ssh?1:0);

    $smarty->assign("apply", apply_filter());
    $display .= $smarty->fetch (get_template_path('generic.tpl', TRUE, dirname(__FILE__)));
    return $display;
  }


  /* remove object from parent */
  function remove_from_parent()
  {
    /* Cancel if there's nothing to do here */
    if ((!$this->initially_was_account) || (!$this->acl_is_removeable())){
      return;
    }


    /* Remove and write to LDAP */
    plugin::remove_from_parent();

    /* Zero out array */
    $this->attrs['gosaHostACL']= array();

    /* Keep uid, because we need it for authentification! */
    unset($this->attrs['uid']);
    unset($this->attrs['trustModel']); /* FIXME should be host ?? */

    @DEBUG (DEBUG_LDAP, __LINE__, __FUNCTION__, __FILE__,
    /* include global link_info */
     $this->attributes, "Save");
    $ldap= $this->config->get_ldap_link();
    $ldap->cd($this->dn);
    $this->cleanup();
    $ldap->modify ($this->attrs);

    new log("remove","users/".get_class($this),$this->dn,array_keys($this->attrs),$ldap->get_error());

    if (!$ldap->success()){
      msg_dialog::display(_("LDAP error"), msgPool::ldaperror($ldap->get_error(), $this->dn, LDAP_DEL, get_class()));
    }

    /* Delete group only if cn is uid and there are no other
       members inside */
    $ldap->cd ($this->config->current['BASE']);
    $ldap->search ("(&(objectClass=posixGroup)(gidNumber=".$this->gidNumber."))", array("cn", "memberUid"));
    if ($ldap->count() != 0){
      $attrs= $ldap->fetch();
      if ($attrs['cn'][0] == $this->uid &&
          !isset($this->attrs['memberUid'])){

        $ldap->rmDir($ldap->getDN());
      }
    }

    /* Optionally execute a command after we're done */
    $this->handle_post_events("remove",array("uid" => $this->uid));
  }


  function save_object()
  {
    if (isset($_POST['posixTab'])){
      /* Save values to object */
      plugin::save_object();


      /*Save primary group settings */
      if($this->acl_is_writeable("primaryGroup") && isset($_POST['primaryGroup'])){
        $data= $_POST['primaryGroup'];
        if ($this->primaryGroup != $data){
          $this->is_modified= TRUE;
        }
        $this->primaryGroup= $_POST['primaryGroup'];
      }

      /* Get seelcted shadow checkboxes */
      foreach(array("shadowMin","shadowMax","shadowExpire","shadowInactive","shadowWarning") as $var) {
        if($this->acl_is_writeable($var)){
          $activate_var = "activate_".$var;
          if(isset($_POST['activate_'.$var])){
            $this->$activate_var  = true;
            $this->$var      = $_POST[$var];
          }else{
            $this->$activate_var  = false;
            if ($var != "shadowExpire") {
              $this->$var      = 0;
            }
          }
        }
      }

      /* Force change password ? */
      if(isset($_POST['mustchangepassword'])){
        $this->mustchangepassword = TRUE;
      }else{
        $this->mustchangepassword = FALSE;
      }

      /* Trust mode - special handling */
      if($this->acl_is_writeable("trustModel")){
        if (isset($_POST['trustmode'])){
          $saved= $this->trustModel;
          if ($_POST['trustmode'] == "1"){
            $this->trustModel= "fullaccess";
          } elseif ($_POST['trustmode'] == "2"){
            $this->trustModel= "byhost";
          } else {
            $this->trustModel= "";
          }
          if ($this->trustModel != $saved){
            $this->is_modified= TRUE;
          }
        }
      }
    }

    /* Get regex from alphabet */
    if(isset($_GET['search'])){
      $this->GroupRegex = $_GET['search']."*";
    }

    /* Check checkboxes and regexes */
    if(isset($_POST["PosixGroupDialogPosted"])){

      if(isset($_POST['SubSearch']) && ($_POST['SubSearch'])){
        $this->SubSearch = true;
      }else{
        $this->SubSearch = false;
      }
      if(isset($_POST['guser'])){
        $this->GroupUserRegex = $_POST['guser'];
      }
      if(isset($_POST['regex'])){
        $this->GroupRegex = $_POST['regex'];
      }
    }
    $this->GroupRegex = preg_replace("/\*\**/","*",$this->GroupRegex);
    $this->GroupUserRegex = preg_replace("/\*\**/","*",$this->GroupUserRegex);
  }


  /* Save data to LDAP, depending on is_account we save or delete */
  function save()
  {

    /* Adapt shadow values */
    if (!$this->activate_shadowExpire) {
      $this->shadowExpire = "0";
    } else {
      /* Transform date to days since the beginning */
      list($day, $month, $year) = explode('.', $this->shadowExpire, 3);
      $this->shadowExpire = (int)(mktime(0, 0, 0, $month, $day, $year)/ (60 * 60 * 24)) ;
    }
    if (!$this->activate_shadowMax) {
      $this->shadowMax = "0";
    }
    if ($this->mustchangepassword) {
      $this->shadowLastChange = (int)(date("U") / 86400) - $this->shadowMax - 1;
    } elseif ($this->is_account && !$this->initially_was_account) {
      $this->shadowLastChange = (int)(date("U") / 86400);
    }
    if (!$this->activate_shadowWarning) {
      $this->shadowWarning = "0";
    }

    if ($this->activate_shadowMin != "1" ) {
      $this->shadowMin = "";
    }

    if (($this->activate_shadowMax != "1") && ($this->mustchangepassword != "1")) {
      $this->shadowMax = "";
    }

    if ($this->activate_shadowWarning != "1" ) {
      $this->shadowWarning = "";
    }

    if ($this->activate_shadowInactive != "1" ) {
      $this->shadowInactive = "";
    }

    if ($this->activate_shadowExpire != "1" ) {
      $this->shadowExpire = "";
    }

    /* Fill gecos */
    if (isset($this->parent) && $this->parent !== NULL) {
      $this->gecos= rewrite($this->parent->by_object['user']->cn);
      if (!preg_match('/^[a-z0-9 -]+$/i', $this->gecos)) {
        $this->gecos= "";
      }
    }

    foreach (array("shadowMin","shadowMax","shadowWarning","shadowInactive","shadowExpire") as $attr) {
      $this->$attr = (int) $this->$attr;
    }
    /* Call parents save to prepare $this->attrs */
    plugin::save();

    /* Trust accounts */
    $objectclasses= array();
    foreach ($this->attrs['objectClass'] as $key => $class) {
      /*if (preg_match('/trustAccount/i', $class)){*/
      if (preg_match('/hostObject/i', $class)) {
        continue;
      }
      $objectclasses[]= $this->attrs['objectClass'][$key];
    }
    $this->attrs['objectClass']= $objectclasses;
    if ($this->trustModel != "") {
      $this->attrs['objectClass'][]= "hostObject";
      $this->attrs['host']= array();

      if ($this->trustModel == "fullaccess") {
        $this->attrs['host'][0]= "*";
      } else {
        if ($this->trustModel == "byhost") {
          foreach ($this->accessTo as $hosts) {
            $this->attrs['host'][]= $hosts;
          }
        }
      }
    } else {
      if ($this->was_trust_account) {
        $this->attrs['host']= array();
      }
    }

    if (empty($this->attrs['gosaDefaultPrinter'])) {
      $thid->attrs['gosaDefaultPrinter']=array();
    }

    /* include global link_info */
    $this->cleanup();

    /* This is just a test, we have had duplicated ids
        in the past when copy & paste was used.
       Normaly this should not happen.
     */
    if (isset($this->attrs['uidNumber']) && !$this->force_ids) {
      $used = $this->get_used_uid_numbers();
      if (isset($used[$this->attrs['uidNumber']]) && $used[$this->attrs['uidNumber']] != $this->dn) {
        msg_dialog::display(_("Warning"),_("A duplicated UID number was written for this user. If this was not intended please verify all used uidNumbers!"), WARNING_DIALOG);
      }
    }

    $ldap = $this->config->get_ldap_link();
    $ldap->cd($this->dn);
    unset($this->attrs['uid']);
    $ldap->modify ($this->attrs);

    /* Log last action */
    if ($this->initially_was_account) {
      new log("modify","users/".get_class($this),$this->dn,array_keys($this->attrs),$ldap->get_error());
    } else {
      new log("create","users/".get_class($this),$this->dn,array_keys($this->attrs),$ldap->get_error());
    }

    if (!$ldap->success()){
      msg_dialog::display(_("LDAP error"), msgPool::ldaperror($ldap->get_error(), $this->dn, LDAP_MOD, get_class()));
    }

    /* Remove lock needed for unique id generation */
    del_lock ("uidnumber");

    // Save ssh stuff if needed
    if ($this->ssh) {
      $this->ssh->setDN($this->dn);
      $this->ssh->save();
    }

    /* Take care about groupMembership values: add to groups */
    foreach ($this->groupMembership as $key => $value){
      if (!isset($this->savedGroupMembership[$key])){
        $g= new grouptabs($this->config,$this->config->data['TABS']['GROUPTABS'], $key,"groups");
        $g->set_acl_base($key);
        $g->by_object['group']->addUser($this->uid);
        $g->save();
      }
    }

    /* Remove groups not listed in groupMembership */
    foreach ($this->savedGroupMembership as $key => $value){
      if (!isset($this->groupMembership[$key])){
        $g= new grouptabs($this->config,$this->config->data['TABS']['GROUPTABS'], $key,"groups");
        $g->set_acl_base($key);
        $g->by_object['group']->removeUser ($this->uid);
        $g->save();
      }
    }

    /* Optionally execute a command after we're done */
    if ($this->initially_was_account == $this->is_account) {
      if ($this->is_modified) {
        $this->handle_post_events("modify",array("uid" => $this->uid));
      }
    } else {
      $this->handle_post_events("add" ,array("uid"=> $this->uid));
    }
  }


  /* Check formular input */
  function check()
  {
    /* Include global link_info */
    $ldap= $this->config->get_ldap_link();

    /* Append groups as memberGroup: to check hook
     */
    $tmp_attributes  = $this->attributes;
    $this->attributes[] = "memberGroup";
    $this->memberGroup = array();
    foreach($this->groupMembership as $dn => $name){
      $this->memberGroup[] = $name;
    }

    /* Call common method to give check the hook */
    $message= plugin::check();
    $this->attributes = $tmp_attributes;

    /* must: homeDirectory */
    if ($this->homeDirectory == ""){
      $message[]= msgPool::required(_("Home directory"));
    }
    if (!tests::is_path($this->homeDirectory)){
      $message[]= msgPool::invalid(_("Home directory"), "", "", "/home/yourname" );
    }

    /* Check ID's if they are forced by user */
    if ($this->force_ids == "1"){

      /* Valid uid/gid? */
      if (!tests::is_id($this->uidNumber)){
        $message[]= msgPool::invalid(_("UID"), $this->uidNumber, "/[0-9]/");
      } else {
        if ($this->uidNumber < $this->config->get_cfg_value("minId")){
          $message[]= msgPool::toosmall(_("UID"), $this->config->get_cfg_value("minId"));
        }
      }
      if (!tests::is_id($this->gidNumber)){
        $message[]= msgPool::invalid(_("GID"), $this->gidNumber, "/[0-9]/");
      } else {
        if ($this->gidNumber < $this->config->get_cfg_value("minId")){
          $message[]= msgPool::toosmall(_("GID"), $this->config->get_cfg_value("minId"));
        }
      }
    }

    /* Check dates */
    if ($this->activate_shadowExpire && ($this->shadowExpire == "" || !tests::is_date($this->shadowExpire))){
      $message[]= msgPool::invalid("shadowExpire", $this->shadowExpire);
    }

    /* Check shadow settings, well I like spaghetties... */
    if ($this->activate_shadowMin){
      if (!tests::is_id($this->shadowMin)){
        $message[]= msgPool::invalid(_("shadowMin"), $this->shadowMin, "/[0-9]/");
      }
    }
    if ($this->activate_shadowMax){
      if (!tests::is_id($this->shadowMax)){
        $message[]= msgPool::invalid(_("shadowMax"), $this->shadowMax, "/[0-9]/");
      }
    }
    if ($this->activate_shadowWarning){
      if (!tests::is_id($this->shadowWarning)){
        $message[]= msgPool::invalid(_("shadowWarning"), $this->shadowWarning, "/[0-9]/");
      }
      if (!$this->activate_shadowMax){
        $message[]= msgPool::depends("shadowWarning", "shadowMax");
      }
      if ($this->shadowWarning > $this->shadowMax){
        $message[]= msgPool::toobig("shadowWarning", "shadowMax");
      }
      if ($this->activate_shadowMin && $this->shadowWarning < $this->shadowMin){
        $message[]= msgPool::toosmall("shadowWarning", "shadowMin");
      }
    }
    if ($this->activate_shadowInactive){
      if (!tests::is_id($this->shadowInactive)){
        $message[]= msgPool::invalid(_("shadowInactive"), $this->shadowInactive, "/[0-9]/");
      }
      if (!$this->activate_shadowMax){
        $message[]= msgPool::depends("shadowInactive", "shadowMax");
      }
    }
    if ($this->activate_shadowMin && $this->activate_shadowMax){
      if ($this->shadowMin > $this->shadowMax){
        $message[]= msgPool::toobig("shadowMin", "shadowMax");
      }
    }

    return ($message);
  }

  function addGroup ($groups)
  {
    /* include global link_info */
    $ldap= $this->config->get_ldap_link();

    /* Walk through groups and add the descriptive entry if not exists */
    foreach ($groups as $value){

      if (!array_key_exists($value, $this->groupMembership)){
        $ldap->cat($value, array('cn', 'description', 'dn'));
        $attrs= $ldap->fetch();
        error_reporting (0);
        if (!isset($attrs['description'][0])){
          $entry= $attrs["cn"][0];
        } else {
          $dsc= preg_replace ('/^Group of user/', _("Group of user"), $attrs["description"][0]);
          $entry= $attrs["cn"][0]." [$dsc]";
        }
        error_reporting (E_ALL | E_STRICT);

        if(obj_is_writable($attrs['dn'],"groups/group","memberUid")){
          $this->groupMembership[$attrs['dn']]= $entry;
        }
      }
    }

    /* Sort groups */
    asort ($this->groupMembership);
    reset ($this->groupMembership);
  }


  /* Del posix user from some groups */
  function delGroup ($groups)
  {
    $dest= array();
    foreach($groups as $dn_to_del){
      if(isset($this->groupMembership[$dn_to_del]) && obj_is_writable($dn_to_del,"groups/group","memberUid")){
        unset($this->groupMembership[$dn_to_del]);
      }
    }
  }


  /* Adapt from template, using 'dn' */
  function adapt_from_template($dn, $skip= array())
  {
    /* Include global link_info */
    $ldap= $this->config->get_ldap_link();

    plugin::adapt_from_template($dn, $skip);
    $template= $this->attrs['uid'][0];

    /* Adapt group membership */
    $ldap->cd($this->config->current['BASE']);
    $ldap->search("(&(objectClass=posixGroup)(memberUid=".$this->attrs["uid"][0]."))", array("description", "cn"));

    while ($this->attrs= $ldap->fetch()){
      if (!isset($this->attrs["description"][0])){
        $entry= $this->attrs["cn"][0];
      } else {
        $entry= $this->attrs["cn"][0]." [".$this->attrs["description"][0]."]";
      }
      $this->groupMembership[$ldap->getDN()]= $entry;
    }

    /* Fix primary group settings */
    if($this->gidNumber == 2147483647){
      $this->gidNumber = "";
    }

    if($this->gidNumber){
      $ldap->cd($this->config->current['BASE']);
      $ldap->search("(&(objectClass=posixGroup)(cn=$template)(gidNumber=".$this->gidNumber."))", array("cn"));
      if ($ldap->count() != 1){
        $this->primaryGroup= $this->gidNumber;
      }
    }

    $ldap->cd($this->config->current['BASE']);
    $ldap->search("(&(objectClass=gosaUserTemplate)(uid=".$template.")(accessTo=*))", array("cn","accessTo"));
    while($attr = $ldap->fetch()){
      $tmp = $attr['accessTo'];
      unset ($tmp['count']);
      $this->accessTo = $tmp;
    }

    /* Adjust shadow checkboxes */
    foreach (array("shadowMin", "shadowMax", "shadowWarning", "shadowInactive", "shadowExpire") as $val){
      if ($this->$val != 0){
        $oval= "activate_".$val;
        $this->$oval= "1";
      }
    }

    /* Only enable checkbox, if shadowExpire is in the future */
    if($this->shadowExpire > time()) {
        $this->activate_shadowExpire= "1";
    }

    /* Convert shadowExpire for usage */
    if ($this->shadowExpire == 0){
        $this->shadowExpire= "";
    } else {
        $this->shadowExpire= date('d.m.Y', $this->shadowExpire * 60 * 60 * 24);
    }

  }


  function get_used_uid_numbers()
  {
    $ids= array();
    $ldap= $this->config->get_ldap_link();

    $ldap->cd ($this->config->current['BASE']);
    $ldap->search ("(&(objectClass=posixAccount)(uidNumber=*))", array("uidNumber"));

    /* Get list of ids */
    while ($attrs= $ldap->fetch()){
      $ids[$attrs['uidNumber'][0]] = $attrs['dn'];
    }
    return($ids);
  }

}

?>
